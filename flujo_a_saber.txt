// roshi_fit/backend/prisma/schema.prisma este scheme lo genera prisma con un comando, que son los datos de una base de datos en mysql
[
  model usuarios {
  id                                                                 Int                         @id @default(autoincrement())
  nombre_completo                                                    String                      @db.VarChar(100)
  email                                                              String                      @unique(map: "email") @db.VarChar(100)
  telefono                                                           String?                     @db.VarChar(20)
  hash_contrasena                                                    String                      @db.VarChar(255)
  tipo_usuario                                                       usuarios_tipo_usuario?      @default(cliente)
  imagen_perfil                                                      String?                     @db.VarChar(255)
  fecha_nacimiento                                                   DateTime?                   @db.Date
  genero                                                             usuarios_genero?
  contacto_emergencia_nombre                                         String?                     @db.VarChar(100)
  contacto_emergencia_telefono                                       String?                     @db.VarChar(20)
  condiciones_medicas                                                String?                     @db.Text
  objetivos_fitness                                                  String?                     @db.Text
  nivel_experiencia                                                  usuarios_nivel_experiencia? @default(principiante)
  tema_preferido                                                     usuarios_tema_preferido?    @default(original)
  esta_activo                                                        Boolean?                    @default(true)
  email_verificado                                                   Boolean?                    @default(false)
  creacion_fecha                                                     DateTime?                   @default(now()) @db.Timestamp(0)
  actualizacion_fecha                                                DateTime?                   @default(now()) @db.Timestamp(0)
  cambio_por                                                         Int?
  carrito_compras                                                    carrito_compras[]
  categorias_producto                                                categorias_producto[]
  configuracion_sitio                                                configuracion_sitio[]
  contenido_sitio                                                    contenido_sitio[]
  equipos                                                            equipos[]
  evaluaciones_fisicas_evaluaciones_fisicas_usuario_idTousuarios     evaluaciones_fisicas[]      @relation("evaluaciones_fisicas_usuario_idTousuarios")
  evaluaciones_fisicas_evaluaciones_fisicas_entrenador_idTousuarios  evaluaciones_fisicas[]      @relation("evaluaciones_fisicas_entrenador_idTousuarios")
  evaluaciones_fisicas_evaluaciones_fisicas_cambio_porTousuarios     evaluaciones_fisicas[]      @relation("evaluaciones_fisicas_cambio_porTousuarios")
  facturas_facturas_usuario_idTousuarios                             facturas[]                  @relation("facturas_usuario_idTousuarios")
  facturas_facturas_cambio_porTousuarios                             facturas[]                  @relation("facturas_cambio_porTousuarios")
  horarios_servicio_horarios_servicio_entrenador_idTousuarios        horarios_servicio[]         @relation("horarios_servicio_entrenador_idTousuarios")
  horarios_servicio_horarios_servicio_cambio_porTousuarios           horarios_servicio[]         @relation("horarios_servicio_cambio_porTousuarios")
  ordenes_ordenes_usuario_idTousuarios                               ordenes[]                   @relation("ordenes_usuario_idTousuarios")
  ordenes_ordenes_cambio_porTousuarios                               ordenes[]                   @relation("ordenes_cambio_porTousuarios")
  planes_entrenamiento_planes_entrenamiento_usuario_idTousuarios     planes_entrenamiento[]      @relation("planes_entrenamiento_usuario_idTousuarios")
  planes_entrenamiento_planes_entrenamiento_entrenador_idTousuarios  planes_entrenamiento[]      @relation("planes_entrenamiento_entrenador_idTousuarios")
  planes_entrenamiento_planes_entrenamiento_cambio_porTousuarios     planes_entrenamiento[]      @relation("planes_entrenamiento_cambio_porTousuarios")
  planes_suscripcion                                                 planes_suscripcion[]
  productos                                                          productos[]
  proveedores                                                        proveedores[]
  reservas_clases_reservas_clases_usuario_idTousuarios               reservas_clases[]           @relation("reservas_clases_usuario_idTousuarios")
  reservas_clases_reservas_clases_cambio_porTousuarios               reservas_clases[]           @relation("reservas_clases_cambio_porTousuarios")
  servicios                                                          servicios[]
  sesiones_entrenamiento_sesiones_entrenamiento_usuario_idTousuarios sesiones_entrenamiento[]    @relation("sesiones_entrenamiento_usuario_idTousuarios")
  sesiones_entrenamiento_sesiones_entrenamiento_cambio_porTousuarios sesiones_entrenamiento[]    @relation("sesiones_entrenamiento_cambio_porTousuarios")
  suscripciones_usuario_suscripciones_usuario_usuario_idTousuarios   suscripciones_usuario[]     @relation("suscripciones_usuario_usuario_idTousuarios")
  suscripciones_usuario_suscripciones_usuario_cambio_porTousuarios   suscripciones_usuario[]     @relation("suscripciones_usuario_cambio_porTousuarios")
  testimonios_testimonios_usuario_idTousuarios                       testimonios[]               @relation("testimonios_usuario_idTousuarios")
  testimonios_testimonios_cambio_porTousuarios                       testimonios[]               @relation("testimonios_cambio_porTousuarios")
  transacciones_pago_transacciones_pago_usuario_idTousuarios         transacciones_pago[]        @relation("transacciones_pago_usuario_idTousuarios")
  transacciones_pago_transacciones_pago_cambio_porTousuarios         transacciones_pago[]        @relation("transacciones_pago_cambio_porTousuarios")
  usuarios                                                           usuarios?                   @relation("usuariosTousuarios", fields: [cambio_por], references: [id], onUpdate: NoAction, map: "usuarios_ibfk_1")
  other_usuarios                                                     usuarios[]                  @relation("usuariosTousuarios")

  @@index([cambio_por], map: "cambio_por")
}


enum usuarios_nivel_experiencia {
  principiante
  intermedio
  avanzado
}

enum usuarios_tema_preferido {
  original
  futurista
  resistencia
  musculo
}

enum usuarios_genero {
  masculino
  femenino
  otro
}

enum usuarios_tipo_usuario {
  cliente
  admin
  entrenador
}
]

// roshi_fit/backend/src/controllers/userController.ts
[

  import { Request, Response } from 'express';
import { prisma } from '../app'; // Importa la instancia de Prisma
import * as bcrypt from 'bcryptjs';

  export const getUsers = async (req: Request, res: Response) => {
    try {
        // Usa el cliente de Prisma para consultar la tabla 'usuarios'.
        // Nota: Prisma pluraliza automáticamente los nombres de tabla (usuarios -> user).
        const users = await prisma.usuarios.findMany({
            // Excluir información sensible como el hash de la contraseña
            select: {
                id: true,
                nombre_completo: true,
                email: true,
                tipo_usuario: true,
                esta_activo: true,
                creacion_fecha: true,
            }
        });

        // Responde con el array de usuarios y un código 200 (OK)
        return res.status(200).json(users);

    } catch (error) {
        console.error('Error al obtener usuarios:', error);
        // Responde con un código 500 (Error Interno del Servidor)
        return res.status(500).json({ 
            message: 'Error interno del servidor al obtener la lista de usuarios.',
            error: error 
        });
    }
};
]

// roshi_fit/backend/src/router
[
  import { Router } from 'express';
import { getUsers, registerUser } from '../controllers/userController'; // Importar registerUser

const router = Router();

// Define la ruta GET /api/users para obtener la lista de usuarios
router.get('/', getUsers);

// NUEVA RUTA: Ruta POST para registrar un nuevo usuario
router.post('/', registerUser); 


export default router;
]

// roshi_fit/backend/src/services
[
  import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
// Asegúrate de que tu modelo de usuario coincida con el esquema de la DB (usuario vs usuarios)
// Usamos Prisma para este ejemplo

const prisma = new PrismaClient();

// ----------------------------------------------------
// FUNCIÓN DE UTILIDAD: GENERAR TOKEN JWT
// ----------------------------------------------------
export const generateToken = (userId: number, userType: string): string => {
    // ⚠️ Importante: Obtener la clave secreta de las variables de entorno
    const secret = process.env.JWT_SECRET;
    
    if (!secret) { 
        throw new Error('JWT_SECRET no está definido en las variables de entorno.');
    }

    // El token contiene el ID del usuario y su tipo (rol)
    return jwt.sign(
        { id: userId, tipo: userType }, 
        secret, 
        { expiresIn: '1d' } // Expira en 1 día
    );
};
// ... (imports y generateToken function)

// ----------------------------------------------------
// FUNCIÓN PRINCIPAL: INICIO DE SESIÓN (ACTUALIZADA)
// ----------------------------------------------------
export const loginUser = async (email: string, password_plana: string) => {
    // 1. Buscar usuario y comparar contraseña (código anterior)
    const usuario = await prisma.usuarios.findUnique({ where: { email } });
    if (!usuario) { throw new Error('Credenciales inválidas'); }
    
    const contrasenaValida = await bcrypt.compare(password_plana, usuario.hash_contrasena);
    if (!contrasenaValida) { throw new Error('Credenciales inválidas'); }
    
    // 🚨 3. LÓGICA DE ESTADO AVANZADA: Revisar la suscripción
    
    // Si la cuenta está marcada como activa, procedemos
    if (usuario.esta_activo && usuario.email_verificado) {
        // La cuenta está al día.
    } else {
        // Si no está activa, revisamos el motivo.
        const ultimaSuscripcion = await prisma.suscripciones_usuario.findFirst({
            where: { usuario_id: usuario.id },
            orderBy: { fecha_fin: 'desc' }
        });
        
        const hoy = new Date();

        // Caso A: El usuario tiene una suscripción, pero está expirada.
        if (ultimaSuscripcion && ultimaSuscripcion.fecha_fin < hoy) {
            // El estado debe cambiarse a 'vencida' en la DB por un cron job,
            // pero el login lo detecta por la fecha.
            throw new Error('Cuenta vencida. Renovar plan para acceder.');
        } 
        
        // Caso B: El usuario nunca ha pagado (después de registro)
        if (!ultimaSuscripcion) {
            throw new Error('Cuenta inactiva por falta de pago. Renovar plan.');
        }
        
        // Caso C: Inactiva por otra razón (error de sistema, suspendida)
        throw new Error('Cuenta inactiva. Contacte a soporte.');
    }
    
    // 4. Generar el token JWT (código anterior)
    const userType = usuario.tipo_usuario;
    if (userType === null) { throw new Error('El tipo de usuario no está definido. Contacte a administración.'); }
    
    const token = generateToken(usuario.id, userType); 
    
    // 5. Devolver el token (código anterior)
    return {
        token,
        usuario: {
            id: usuario.id,
            nombre: usuario.nombre_completo,
            email: usuario.email,
            tipo: userType,
            tema_preferido: usuario.tema_preferido
        }
    };
};
]

//roshi_fit/backend/src/app.ts
[
  import express from 'express';
import { PrismaClient } from '@prisma/client';
import authRoutes from './routes/authRoutes';
import userRoutes from './routes/userRoutes'; 
import cors from 'cors'; 
import planRoutes from './routes/planRoutes'; 



const app = express();

const allowedOrigins = [
  'http://localhost:5173', // Origen para desarrollo local
  'https://roshi-fit-club-l.onrender.com' // Origen para el frontend en producción
];

const corsOptions = {
  origin: allowedOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true, 
  optionsSuccessStatus: 204
};

app.use(cors(corsOptions));
app.use(express.json());
app.use('/api/plans', planRoutes); 



export const prisma = new PrismaClient();

// Rutas de API
app.get('/', (req, res) => {
  res.send('¡Servidor del gimnasio funcionando!');
});

// Define el prefijo de la ruta para usuarios: /api/users
app.use('/api/auth', authRoutes); 
app.use('/api/users', userRoutes); 




export default app;
]

// roshi_fit/src/api/axiosInstance.ts
[
  import axios from 'axios';

// Crea una instancia de Axios con una URL base.
const api = axios.create({
  baseURL: 'http://localhost:5000/api', // OK si tu backend usa 5000
  timeout: 10000, 
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
]

// roshi_fit/src/api/userApi.ts
[
  import api from './axiosInstance';
import { type RegisterUserParams, type User } from '../types/User'; 

// ----------------------------------------------------
// INTERFACES DE RESPUESTA
// ----------------------------------------------------

// 1. Respuesta de Registro (contiene el usuario anidado)
interface RegisterApiResponse {
    status: string;
    mensaje: string;
    usuario: User & { id: number };
}

// 2. Respuesta de Obtener Usuarios (asumimos que devuelve una lista)
interface FetchUsersApiResponse {
    status: string;
    mensaje: string;
    usuarios: User[]; // Lista de objetos de tipo User
}

// ----------------------------------------------------
// FUNCIÓN 1: REGISTRAR USUARIO
// ----------------------------------------------------
export const registerUser = async (params: RegisterUserParams): Promise<RegisterApiResponse> => {
    try {
        const response = await api.post('/users', params);
        // Devuelve el objeto de respuesta completo { status, mensaje, usuario }
        return response.data as RegisterApiResponse; 
    } catch (error) {
        console.error('Error al registrar usuario:', error);
        throw error;
    }
};

// ----------------------------------------------------
// FUNCIÓN 2: OBTENER TODOS LOS USUARIOS (NUEVA FUNCIÓN)
// ----------------------------------------------------
/**
 * Llama al endpoint GET /api/users para obtener una lista de todos los usuarios.
 * @returns Una promesa que resuelve con la lista de objetos User.
 */
export const fetchUsers = async (): Promise<User[]> => {
    try {
        // Llama al endpoint configurado en el backend
        const response = await api.get<FetchUsersApiResponse>('/users'); 
        
        // 🚨 CRUCIAL: Solo devolvemos la lista de usuarios, no el objeto de respuesta completo.
        return response.data.usuarios; 
    } catch (error) {
        console.error('Error al obtener la lista de usuarios:', error);
        throw error; 
    }
};
]

// roshi_fit/src/components/auth/LoginForm.tsx
[
  import React, { useState, type FormEvent } from 'react';
import axiosInstance from '../../api/axiosInstance';
import { LogIn } from 'lucide-react';

// Tipos básicos para la respuesta del Login
interface LoginResponse {
    status: 'success' | 'error';
    mensaje: string;
    token: string;
    usuario: {
        id: number;
        nombre: string;
        email: string;
        tipo: string;
        tema_preferido: 'original' | 'futurista' | 'resistencia' | 'musculo';
    };
}

interface LoginFormProps {
    onLoginSuccess: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onLoginSuccess }) => {
    const [formData, setFormData] = useState({
        email: '',
        password: '',
    });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [message, setMessage] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value,
        });
    };

    const handleSubmit = async (e: FormEvent) => {
        e.preventDefault();
        setError(null);
        setMessage(null);
        setLoading(true);

        try {
            console.log('📤 Enviando credenciales:', { email: formData.email });
            
            // 1. Llamada a la API de Login
            const response = await axiosInstance.post<LoginResponse>('/auth/login', formData);
            
            console.log('📥 Respuesta recibida:', response.data);
            
            // Verificamos si la respuesta del backend es exitosa
            if (response.data.status === 'success' && response.data.token) {
                const { token, usuario } = response.data;

                // 2. ALMACENAMIENTO DEL TOKEN Y DATOS DEL USUARIO
                localStorage.setItem('userToken', token);
                localStorage.setItem('userData', JSON.stringify(usuario));
                
                console.log('✅ Token guardado exitosamente');
                
                // 3. Establecer mensaje y disparar el éxito
                setMessage(`¡Bienvenido de vuelta, ${usuario.nombre.split(' ')[0]}!`);
                
                // 4. Notificar al componente padre
                setTimeout(onLoginSuccess, 1500); 
            } else {
                setError(response.data.mensaje || 'Error desconocido al intentar ingresar.');
            }

        } catch (err: any) {
            console.error('❌ Error en login:', err);
            console.error('Detalles:', err.response?.data);
            
            // 5. Manejo de errores
            const errorMessage = err.response?.data?.mensaje || 'Error de conexión. Intente más tarde.';
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <h3 className="text-xl font-semibold text-text-light mb-4">Ingrese sus credenciales</h3>
            
            {/* Mensajes de Estado */}
            {message && (
                <div className="p-3 bg-green-700/50 text-green-300 rounded-lg border border-green-600">
                    {message}
                </div>
            )}
            {error && (
                <div className="p-3 bg-red-700/50 text-red-300 rounded-lg border border-red-600">
                    {error}
                </div>
            )}
            
            {/* Email */}
            <div>
                <label className="block text-sm font-medium text-text-gray mb-1">
                    Email
                </label>
                <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                    className="w-full p-3 border border-accent bg-secondary text-text-light rounded-lg focus:ring-primary focus:border-primary transition-colors"
                    placeholder="maestro@roshifit.com"
                />
            </div>

            {/* Contraseña */}
            <div>
                <label className="block text-sm font-medium text-text-gray mb-1">
                    Contraseña
                </label>
                <input
                    type="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    required
                    className="w-full p-3 border border-accent bg-secondary text-text-light rounded-lg focus:ring-primary focus:border-primary transition-colors"
                    placeholder="Mínimo 6 caracteres"
                />
            </div>

            {/* Botón de Ingreso */}
            <button
                type="submit"
                disabled={loading}
                className={`w-full flex justify-center items-center space-x-2 py-3 px-4 rounded-lg font-bold transition-all ${
                    loading ? 'bg-primary/50 cursor-not-allowed' : 'bg-primary hover:bg-gold shadow-lg shadow-primary/50'
                }`}
            >
                {loading ? (
                    'Ingresando...'
                ) : (
                    <>
                        <LogIn size={20} />
                        <span>INGRESAR AL DOJO</span>
                    </>
                )}
            </button>
            
            <div className="text-center text-sm">
                <a href="#" className="text-accent hover:text-gold transition-colors">¿Olvidaste tu contraseña?</a>
            </div>
        </form>
    );
};

export default LoginForm;
]

// roshi_fit/src\components\temas\Futurista\NavbarFuturista.tsx
[
    import React from 'react';
import { Link } from 'react-router-dom';
import { LogIn, UserPlus, Sun } from 'lucide-react'; // Solo importa Sun
import { type NavbarThemeProps } from '../../Navbar'; 

const navItems = [
    { name: 'Inicio', path: '/' },
    { name: 'Servicios', path: '/servicios' },
    { name: 'Planes', path: '/planes' },
    { name: 'Productos', path: '/productos' },
    { name: 'Equipos', path: '/equipos' },
    { name: 'Testimonios', path: '/testimonios' },
];

const NavbarFuturista: React.FC<NavbarThemeProps> = ({ setIsRegisterModalOpen, setIsLoginModalOpen, toggleTheme }) => {
    
    return (
        // 🚨 CAMBIO ESTRUCTURAL: Usamos 'backdrop-blur' para el efecto cristal cyberpunk
        <header className="fixed top-0 w-full z-50 shadow-2xl bg-secondary/80 backdrop-blur-md border-b border-primary/20">
            <div className="container mx-auto px-4 py-4 flex justify-between items-center">
                {/* Logo Futurista: usa animación y color primario cian */}
                <Link to="/" className="text-3xl font-extrabold text-primary animate-neon tracking-wider">
                    ROS H I F I T
                </Link>

                {/* Navegación (Desktop) */}
                <nav className="hidden md:flex space-x-8">
                    {navItems.map(item => (
                        <a 
                            key={item.name} 
                            href={item.path} 
                            className="font-light text-text-light hover:text-gold transition-all relative after:content-[''] after:absolute after:w-0 after:h-[2px] after:bottom-[-5px] after:left-0 after:bg-gold after:transition-all after:duration-300 hover:after:w-full"
                        >
                            {item.name}
                        </a>
                    ))}
                </nav>

                {/* Botones de Acción y Tema */}
                <div className="flex items-center space-x-3">
                    {/* Botón Ingresar: Estilo de chip */}
                    <button 
                        onClick={() => setIsLoginModalOpen(true)}
                        className="flex items-center space-x-1 p-2 rounded-full bg-accent hover:bg-gold/20 border border-gold text-text-light shadow-md transition-colors"
                    >
                        <LogIn size={18} className="text-gold" />
                        <span className="hidden sm:inline">Conectar</span>
                    </button>

                    {/* Botón Registrarse: Estilo de energía */}
                    <button 
                        onClick={() => setIsRegisterModalOpen(true)}
                        className="flex items-center space-x-1 p-2 rounded-full bg-primary hover:bg-primary/80 text-secondary font-bold shadow-lg shadow-primary/50 transition-all"
                    >
                        <UserPlus size={18} />
                        <span className="hidden sm:inline">Registro (Cypher)</span>
                    </button>

                    {/* Botón de Cambio de Tema: Muestra el Sol (cambia al tema Original/día) */}
                    <button 
                        onClick={toggleTheme} 
                        className="p-2 rounded-full transition-all text-gold hover:bg-accent/50"
                        title="Cambiar a Tema Original"
                    >
                        <Sun size={20} />
                    </button>
                </div>
            </div>
        </header>
    );
};

export default NavbarFuturista;
]

// roshi_fit/src\components\temas\Original\NavbarOriginal.tsx
[
    import React from 'react';
import { Link } from 'react-router-dom';
import { LogIn, UserPlus, Moon } from 'lucide-react'; // Solo importa Moon
import { type NavbarThemeProps } from '../../Navbar'; 

const navItems = [
    { name: 'Inicio', path: '/' },
    { name: 'Servicios', path: '/servicios' },
    { name: 'Planes', path: '/planes' },
    { name: 'Productos', path: '/productos' },
    { name: 'Equipos', path: '/equipos' },
    { name: 'Testimonios', path: '/testimonios' },
];

const NavbarOriginal: React.FC<NavbarThemeProps> = ({ setIsRegisterModalOpen, setIsLoginModalOpen, toggleTheme }) => {
    
    return (
        <header className="fixed top-0 w-full z-50 shadow-xl bg-secondary">
            <div className="container mx-auto px-4 py-3 flex justify-between items-center">
                {/* Logo Original */}
                <Link to="/" className="text-2xl font-bold text-primary transition-colors">
                    Roshi Fit Club
                </Link>

                {/* Navegación (Desktop) */}
                <nav className="hidden md:flex space-x-6">
                    {navItems.map(item => (
                        <a 
                            key={item.name} 
                            href={item.path} 
                            className="font-medium hover:text-gold transition-colors text-text-light"
                        >
                            {item.name}
                        </a>
                    ))}
                </nav>

                {/* Botones de Acción y Tema */}
                <div className="flex items-center space-x-3">
                    {/* Botón Ingresar */}
                    <button 
                        onClick={() => setIsLoginModalOpen(true)}
                        className="flex items-center space-x-1 p-2 rounded-lg bg-accent hover:bg-gold transition-colors text-text-light font-semibold shadow-md"
                    >
                        <LogIn size={18} />
                        <span className="hidden sm:inline">Ingresar</span>
                    </button>

                    {/* Botón Registrarse */}
                    <button 
                        onClick={() => setIsRegisterModalOpen(true)}
                        className="flex items-center space-x-1 p-2 rounded-lg bg-primary hover:bg-gold transition-colors text-text-light font-semibold shadow-lg"
                    >
                        <UserPlus size={18} />
                        <span className="hidden sm:inline">Registrarse</span>
                    </button>

                    {/* Botón de Cambio de Tema: Muestra la Luna (cambia al tema Futurista/noche) */}
                    <button 
                        onClick={toggleTheme} 
                        className="p-2 rounded-full transition-all text-gold hover:bg-primary/50"
                        title="Cambiar a Tema Futurista"
                    >
                        <Moon size={20} />
                    </button>
                </div>
            </div>
        </header>
    );
};

export default NavbarOriginal;
]

// roshi_fit/src\components\Layout.tsx
[
    import React, { type ReactNode } from 'react';
// Opcional: Si solo necesitas el tipo, puedes omitir 'React'
// import { type ReactNode } from 'react'; 
import Navbar from './Navbar';
// import Footer from './Footer'; // Se creará después

interface LayoutProps {
  children: ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    // Usa las clases que obtienen su valor de las variables CSS
    <div className="min-h-screen"> 
      <Navbar />
      <main className="pt-16 bg-secondary text-text-light"> {/* Aplicar clases aquí asegura que todo se pinte */}
        {children}
      </main>
      {/* <Footer /> */}
    </div>
  );
};

export default Layout;
]

// roshi_fit/src\components\Modal.tsx
[
    import React, { type ReactNode } from 'react';

interface ModalProps {
  isOpen: boolean; // Controla si el modal está visible
  onClose: () => void; // Función para cerrar el modal
  title: string;
  children: ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    // 1. Fondo Oscuro (Overlay)
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-90 backdrop-blur-sm" onClick={onClose}>
      
      {/* 2. Contenedor del Modal */}
      <div 
        className="bg-secondary p-8 rounded-xl shadow-2xl max-w-lg w-full transform transition-all duration-300 scale-100 border border-accent"
        onClick={(e) => e.stopPropagation()} // Detiene la propagación para que el clic dentro no cierre el modal
      >
        {/* Encabezado */}
        <div className="flex justify-between items-center mb-6 border-b border-accent pb-3">
          <h2 className="text-2xl font-bold text-primary">{title}</h2>
          <button 
            onClick={onClose} 
            className="text-text-light hover:text-gold transition-colors text-3xl leading-none"
            aria-label="Cerrar Modal"
          >
            &times;
          </button>
        </div>

        {/* Contenido (Formulario) */}
        <div className="text-text-light">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;
]

//roshi_fit/src\components\Navbar.tsx
[
    import React, { useState } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import Modal from './Modal'; 
import NavbarOriginal from './temas/Original/NavbarOriginal';
import NavbarFuturista from './temas/Futurista/NavbarFuturista';
import RegisterForm from './auth/RegisterForm';
import LoginForm from './auth/LoginForm';
import PaymentModal from './PaymentModal'; // Tendrás que crear este componente


// Definición de las props que deben recibir los componentes temáticos
export interface NavbarThemeProps {
    isRegisterModalOpen: boolean;
    setIsRegisterModalOpen: (isOpen: boolean) => void;
    isLoginModalOpen: boolean;
    setIsLoginModalOpen: (isOpen: boolean) => void;
    // Función para cambiar de tema (se pasa a los diseños para el botón)
    toggleTheme: () => void;
}

interface PaymentData {
    userId: number;
    planId: number;
    planPrice: number;
}

const Navbar: React.FC = () => {
    const { theme, toggleTheme } = useTheme();

    // 1. Estados para controlar la visibilidad de los modales
    const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);
    const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
    
    const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false); // 🚨 Nuevo estado para el Modal de Pago
    const [currentPaymentData, setCurrentPaymentData] = useState<PaymentData | null>(null);


    // 2. Función de éxito de registro (mueve de registro a pago)
   const handleRegisterSuccess = (userId: number, planId: number, planPrice: number) => {
        setIsRegisterModalOpen(false);
        
        // 🚨 CORRECCIÓN 2: El error de ámbito desaparece porque las variables existen como parámetros
        // Si usas el mismo nombre que las variables de la función, el shorthand funciona
        setCurrentPaymentData({ userId, planId, planPrice }); 
        
        setIsPaymentModalOpen(true); 
    };

        const handlePaymentSuccess = () => {
        setIsPaymentModalOpen(false);
        // Redirigir o simular inicio de sesión (lo haremos en el contexto)
        window.location.reload(); 
    };

    // 3. Props que se pasan al diseño seleccionado
    const modalProps: NavbarThemeProps = { 
        isRegisterModalOpen, 
        setIsRegisterModalOpen, 
        isLoginModalOpen, 
        setIsLoginModalOpen,
        toggleTheme // Incluir la función de cambio de tema
    };

        // 🚨 2. Función de éxito de Login: Cierra el modal y recarga/redirecciona.
    const handleLoginSuccess = () => {
        setIsLoginModalOpen(false);
        
        // **IMPORTANTE:** Aquí deberías recargar la página o usar un 
        // contexto de autenticación para cambiar la interfaz (ej. cambiar botones de Login/Registro 
        // por un botón de "Mi Perfil").
        // Por ahora, solo recargaremos la página para simular un inicio de sesión completo.
        window.location.reload(); 
    };

    // 4. Renderizado condicional del diseño y títulos de modal
    const NavbarComponent = theme === 'futurista' ? NavbarFuturista : NavbarOriginal;
    const modalTitle = theme === 'futurista' ? "Autorización Ciber-Dojo" : "Ingreso al Dojo Clásico";
    
    // 5. Estructura de la aplicación: Navbar + Modales
    return (
        <>
            {/* Renderiza el componente de diseño seleccionado, pasándole las funciones */}
            <NavbarComponent {...modalProps} />
            
            {/* MODAL DE REGISTRO */}
            <Modal
                isOpen={isRegisterModalOpen}
                onClose={() => setIsRegisterModalOpen(false)}
                title={`Registro: ${modalTitle}`}
            >
                {/* 🚨 CORRECCIÓN 3: Cambiamos el nombre de la prop de 'onSuccess' a 'onRegisterSuccess' */}
                <RegisterForm onRegisterSuccess={handleRegisterSuccess} />
            </Modal>
            
            <Modal
                isOpen={isPaymentModalOpen}
                onClose={() => setIsPaymentModalOpen(false)}
                title={`Paso 2: Pago de Suscripción (${currentPaymentData?.planPrice.toFixed(2)} GTQ)`}
            >
                {currentPaymentData && (
                    <PaymentModal
                        data={currentPaymentData}
                        onPaymentSuccess={handlePaymentSuccess}
                    />
                )}
            </Modal>
            {/* MODAL DE INICIO DE SESIÓN */}
            <Modal
                isOpen={isLoginModalOpen}
                onClose={() => setIsLoginModalOpen(false)}
                title={`Ingreso: ${modalTitle}`}
            >
                {/* 🚨 3. Integración del LoginForm */}
                <LoginForm onLoginSuccess={handleLoginSuccess} />
            </Modal>
        </>
    );
};

export default Navbar;
]

//roshi_fit/src\contexts\ThemeContext.tsx
[
    import React, { createContext, useState, useContext, useEffect, type ReactNode } from 'react';
type Theme = 'original' | 'futurista';

interface ThemeContextProps {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

interface ThemeProviderProps {
  children: ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [theme, setThemeState] = useState<Theme>('original'); 

  useEffect(() => {
    const body = document.body;
    
    // 1. Limpia las clases de tema anteriores
    body.classList.remove('theme-original', 'theme-futurista');
    
    // 2. Aplica la clase de tema (la clase base del tema YA tiene las variables de color)
    body.classList.add(theme === 'original' ? 'theme-original' : 'theme-futurista');
    
    // 3. Aplicar estilos base al body
    body.style.backgroundColor = 'var(--secondary)';
    body.style.color = 'var(--text-light)';
    
  }, [theme]);
  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
  };
  
  const toggleTheme = () => {
      setThemeState(currentTheme => (currentTheme === 'original' ? 'futurista' : 'original'));
  };

  return (
    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Hook personalizado para usar el contexto
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};
]

//roshi_fit/src\pages\HomePage.tsx
[
    import React from 'react';

const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen">
      
      {/* 1. HERO SECTION */}
      <section id="inicio" className="h-[70vh] flex items-center justify-center bg-cover bg-center" style={{ backgroundImage: 'url("/assets/gym-hero.jpg")' }}> 
        <div className="text-center p-8 bg-black/50 rounded-lg">
          <h1 className="text-5xl font-extrabold mb-4 text-text-light">
            Roshi Fit Club
          </h1>
          <p className="text-xl text-text-light/80">
            Tu camino hacia la maestría física y mental.
          </p>
          <button className="mt-6 px-6 py-3 bg-primary text-text-light font-semibold rounded-full hover:bg-gold transition duration-300">
            Únete Hoy
          </button>
        </div>
      </section>

      {/* 2. SECCIÓN DE SERVICIOS (Carrusel) */}
      <section id="servicios" className="py-20 container mx-auto px-4">
        <h2 className="text-4xl font-bold text-center mb-10 text-primary">Nuestros Servicios</h2>
        <div className="h-64 bg-accent/50 flex items-center justify-center rounded-xl">
          <p className="text-text-light/70">Espacio para Carrusel de Servicios</p>
        </div>
      </section>

      {/* 3. SECCIÓN DE PLANES (Comparación) */}
      <section id="planes" className="py-20 bg-accent/20">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-10 text-primary">Elige tu Plan de Batalla</h2>
          <div className="h-96 bg-accent/70 flex items-center justify-center rounded-xl">
            <p className="text-text-light/70">Espacio para Comparación de Planes de Suscripción</p>
          </div>
        </div>
      </section>

      {/* 4. SECCIÓN DE PRODUCTOS (Tienda Integrada) */}
      <section id="productos" className="py-20 container mx-auto px-4">
        <h2 className="text-4xl font-bold text-center mb-10 text-primary">Tienda Roshi Gear</h2>
        <div className="h-64 bg-accent/50 flex items-center justify-center rounded-xl">
          <p className="text-text-light/70">Espacio para Carrusel de Productos Destacados</p>
        </div>
      </section>

      {/* 5. SECCIÓN DE EQUIPOS (Carrusel) */}
      <section id="equipos" className="py-20 bg-accent/20">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-10 text-primary">Nuestro Arsenal de Equipos</h2>
          <div className="h-64 bg-accent/70 flex items-center justify-center rounded-xl">
            <p className="text-text-light/70">Espacio para Carrusel de Equipamiento</p>
          </div>
        </div>
      </section>
      
      {/* 6. SECCIÓN DE TESTIMONIOS (Carrusel) */}
      <section id="testimonios" className="py-20 container mx-auto px-4">
        <h2 className="text-4xl font-bold text-center mb-10 text-primary">Testimonios de Maestros</h2>
        <div className="h-64 bg-accent/50 flex items-center justify-center rounded-xl">
          <p className="text-text-light/70">Espacio para Carrusel de Testimonios</p>
        </div>
      </section>

    </div>
  );
};

export default HomePage;
]


//roshi_fit/src\types\User.ts
[
    // Define la interfaz User, que coincide con los datos que retorna tu endpoint del backend.
export interface User {
  id: number;
  nombre_completo: string;
  email: string;
  tipo_usuario: 'cliente' | 'admin' | 'entrenador';
  esta_activo: boolean;
  creacion_fecha: string; // O Date, si lo formateas en el backend.
}

export interface RegisterUserParams {
    nombre_completo: string;
    email: string;
    contrasena: string;
    // Puedes añadir otros campos si son necesarios en el futuro (ej. nivel_experiencia)
}
]

//roshi_fit/src\styles\base.css
[
    /* base.css */
@import "tailwindcss";

/* Definición del Tema Original (Por Defecto) */
.theme-original {
  --primary: #ff6b35; /* Naranja principal */
  --secondary: #1a1a2e; /* Azul oscuro */
  --accent: #16213e; /* Azul medio */
  --gold: #ffd700; /* Dorado */
  --text-light: #ffffff; /* Blanco */
  --text-gray: #b0bec5; /* Gris claro */
}

/* Definición del Tema Futurista */
.theme-futurista {
  --primary: #00d4ff; /* Cian brillante */
  --secondary: #0a0e27; /* Azul muy oscuro */
  --accent: #1a1f3a; /* Azul medio */
  --gold: #00bcd4; /* Cian dorado */
  --text-light: #ffffff; /* Blanco */
  --text-gray: #b0bec5; /* Gris claro */
}

/* Aplicar el tema por defecto al body */
body {
  /* Aplicar el tema original por defecto */
  --primary: #ff6b35; /* Naranja principal */
  --secondary: #1a1a2e; /* Azul oscuro */
  --accent: #16213e; /* Azul medio */
  --gold: #ffd700; /* Dorado */
  --text-light: #ffffff; /* Blanco */
  --text-gray: #b0bec5; /* Gris claro */
}

/* Animación neon para el tema futurista */
@keyframes neon {
  0%, 100% {
    text-shadow: 0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary);
  }
  50% {
    text-shadow: 0 0 2px var(--primary), 0 0 5px var(--primary), 0 0 8px var(--primary);
  }
}

.animate-neon {
  animation: neon 2s ease-in-out infinite alternate;
}
]

//roshi_fit/src\App.tsx
[
    // roshi_fit/src/App.tsx

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { ThemeProvider } from './contexts/ThemeContext';
import Layout from './components/Layout';
import HomePage from './pages/HomePage';
import './styles/base.css'; // Asegúrate de que esto esté aquí

// Usamos una función simple, no importamos React
const App = () => {
  return (
    // 1. ThemeProvider envuelve toda la lógica de la aplicación
    <ThemeProvider>
      <BrowserRouter>
        <Layout>
          <Routes>
            <Route path="/" element={<HomePage />} />
          </Routes>
        </Layout>
      </BrowserRouter>
    </ThemeProvider>
  );
};

export default App;
]

// tailwind.config.js
[
    // tailwind.config.js (Raíz)

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
    "./src/**/*.css", // Asegúrate de que esta línea esté aquí
  ],
  theme: {
    extend: {
      colors: {
        // ESTO ES LO CRÍTICO: DEBEN ESTAR TODAS LAS VARIABLES AQUÍ
        primary: 'var(--primary)', 
        secondary: 'var(--secondary)',
        accent: 'var(--accent)',
        gold: 'var(--gold)',
        'text-light': 'var(--text-light)',
        'text-gray': 'var(--text-gray)',
      },
      keyframes: {
        neon: {
          '0%, 100%': {
            textShadow: '0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary)',
          },
          '50%': {
            textShadow: '0 0 2px var(--primary), 0 0 5px var(--primary), 0 0 8px var(--primary)',
          },
        },
      },
      animation: {
        neon: 'neon 2s ease-in-out infinite alternate',
      },
    },
  },
  plugins: [],
}
]



import { Request, Response } from 'express'; // mas explicacion como
import { prisma } from '../app'; // el porque es necesario este import

// Decir porque en un controller es necesario este codigo y como funciona, para que pueda reutilizarlo pero aplicando nuevas conexiones 
export const getProducts //porque se pone la palabra getProducts donde se llamara o utilizara  = async (_req: Request, res: Response  //que significan estos parametro y donde se llamatan o ulizan) => {
  try {
    const products // donde se utiliza este products ya que segun la tabla es productos = await prisma.productos.findMany //que significa este findMany({
      where: { esta_activo: true },
      select: //como funciona este select {
        id: true, //segun son las columnas de tabla productos pero porque true, se pueden agregar mas campos y si donde mas se debe modificar para que funcione
        nombre: true,
        descripcion: true,
        precio: true,
        imagen_url: true, // por ejemplo este bloque puedes explcarlo como dentro de estas llaves se deben describir las columnas de la tabla que se desean utilizar, y para ellos sigue esta estructura ... y luego se usa de esta forma ... tomar en cuenta lo siguiente ...
      },
    });
    res.json(products); // que hace esta linea
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al obtener productos.' });
  }
};  // como tambien las pautas de como se ponen el nombre, en que carpeta se debera guardas los archivos que necesita o los que lo utilizaran como que extension se coloca o el significado de la extension.