🔄 Flujo Completo de una Venta de Producto
1. Cliente agrega productos al carrito
Se almacenan temporalmente en carrito_compras (solo si está logueado).
Si es invitado, el carrito vive en la sesión del navegador (no en BD).
2. Checkout: datos de contacto y método de pago
El cliente elige:

A. Si está registrado:
Se usa su usuario_id.
No se piden datos de contacto (ya están en su perfil).
B. Si es invitado:
Se piden: nombre, email, teléfono, dirección.
Se crea un registro en datos_consumidor_invitado.
Se guarda su id para vincularlo a la orden.
✅ En ambos casos, se selecciona un método de pago (tarjeta, PayPal, etc.). 

3. Confirmación de compra → Creación de la orden
Se inserta en la base de datos:

📥 Tabla: ordenes
sql


⌄
INSERT INTO ordenes (
  usuario_id,           -- NULL si es invitado
  datos_invitado_id,    -- NULL si es usuario registrado
  total_q,
  estado_orden,
  tipo_entrega,
  direccion_entrega,
  metodo_pago_id,
  modificado_por,
  estado
) VALUES (
  2,                    -- o NULL
  NULL,                 -- o ID de datos_consumidor_invitado
  295.00,
  'pendiente',
  'retiro',
  'Zona 10...',
  1,                    -- Tarjeta
  1,                    -- Admin/Sistema
  'activo'
);
📥 Tabla: detalles_orden
sql


⌄
INSERT INTO detalles_orden (
  orden_id,
  producto_id,
  cantidad,
  precio_unitario_q,
  subtotal_q,
  modificado_por,
  estado
) VALUES (
  1,
  1,                    -- Proteína Roshi
  1,
  295.00,
  295.00,
  1,
  'activo'
);
🔁 Se repite por cada producto en el carrito. 

4. Procesamiento del pago
El frontend envía los datos de pago al backend (ej: CVV, email de PayPal).
El backend:
Valida los datos.
Simula o procesa el pago (en desarrollo, se asume éxito).
Crea un registro en transacciones_pago.
📥 Tabla: transacciones_pago
sql


⌄
INSERT INTO transacciones_pago (
  orden_id,
  metodo_pago_id,
  monto_q,
  estado_transaccion,
  referencia_externa,
  detalles,             -- JSON con datos sensibles (CVV oculto en producción)
  modificado_por,
  estado
) VALUES (
  1,
  1,
  295.00,
  'exitosa',
  'txn_roshi_001',
  '{"numero_tarjeta": "****1234", "cvv": "***"}',
  1,
  'activo'
);
🔒 En producción real: Nunca guardes CVV ni número completo. Usa un gateway (Stripe, PayPal) que devuelva un token. 

5. Actualización del estado de la orden
sql



⌄
UPDATE ordenes 
SET 
  estado_orden = 'pagada',
  transaccion_id = 1
WHERE id = 1;
6. Generación de la factura
📥 Tabla: facturas
sql



⌄
INSERT INTO facturas (
  orden_id,
  numero_factura,
  fecha_emision,
  total_q,
  tipo,
  estado_factura,
  modificado_por,
  estado
) VALUES (
  1,
  'FAC-2025-001',
  CURDATE(),
  295.00,
  'venta',
  'emitida',
  1,
  'activo'
);
📥 Tabla: facturas_detalle
sql


INSERT INTO facturas_detalle (
  factura_id,
  descripcion,
  cantidad,
  precio_unitario_q,
  subtotal_q,
  tipo_item,
  item_id,
  modificado_por,
  estado
) VALUES (
  1,
  'Proteína Roshi Fit Vainilla 1kg',
  1,
  295.00,
  295.00,
  'producto',
  1,
  1,
  'activo'
);
7. (Opcional) Actualización de inventario
El sistema reduce el stock del producto:
sql


⌄
UPDATE productos 
SET stock = stock - 1 
WHERE id = 1;
Si el stock cae por debajo de stock_minimo, se genera una alerta en el panel de admin.
👁️ ¿Cómo lo ve el administrador?
En la sección “Ventas” del panel de admin:

#001
María López
Proteína Roshi (1)
Q295.00
Tarjeta
✅ Pagada
Ver • Imprimir factura
#002
Juan Pérez (invitado)
Camiseta Negra (2)
Q240.00
PayPal
✅ Pagada
Ver • Imprimir factura

Al hacer clic en “Ver”, el admin ve:

Datos del cliente (registrado o invitado)
Lista de productos comprados
Detalles del pago (sin datos sensibles)
Factura (con opción de descargar PDF)
✅ Resumen: Tablas involucradas en una venta de producto
ordenes
Encabezado de la venta
detalles_orden
Productos comprados
datos_consumidor_invitado
Solo si es invitado
transacciones_pago
Registro del pago
facturas
+
facturas_detalle
Documento fiscal
productos
Actualización de stock

🔒 Notas importantes
Los invitados no necesitan cuenta, pero sus datos se guardan para la orden.
Todas las ventas quedan registradas, ya sea por usuario o invitado.
El admin tiene visibilidad total en la sección Ventas.
El stock se actualiza automáticamente como aplicar transacciones (eso si lo requiere ya que se esta trabajando con react prisma y typescript por lo que desconosco (cabe mencionar que la base la tengo en mysql y no le he implementado nada ademas de las tablas)
