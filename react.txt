Frontend:

React + TypeScript
Tailwind CSS
Axios

Backend:

Node.js + TypeScript
Express.js
Prisma (ORM para MySQL)
JWT (autenticación)

Base de datos:

MySQL

npm create vite@latest proyecto // npm install //npm run dev

// tambien use react bits para algunas animaciones

//para Tailwind
    npm install tailwindcss @tailwindcss/vite
    //se debe importar en vite.config.ts 
    import tailwindcss from '@tailwindcss/vite'

    //tambien importar en la hoja de estilos a usar ejem. ./styles/index.CSS
    @import "tailwindcss";

//para iniciar node.js
npm init -y

//para instalar Express
npm install express

//para crear Prisma
npm install prisma @prisma/client
npm install -D prisma
    //para crear una carpeta prima e inicializarla
    npx prisma init //luego modificar en // prisma/schema.prisma

//configurar .env
# .env
DATABASE_URL="mysql://USUARIO:CONTRASEÑA@HOST:PUERTO/NOMBRE_DB"

    // para que prisma lea la base de datos y genere datos
    npx prisma db pull
    npx prisma generate
 
    npm install -D ts-node //configurar archivos package.json y tsvonfig.json 

//para asegurar conexion ejecutar npm run dev dentro del Backend
//luego en la raiz instalar axios para unir frontedn y Backend
npm install axios // en src/api crear una instacia como axiosInstance.ts // esto para no usar http://localhost:5000/api/users sino api.get('/users')

//para menejar la logica entre esto usar api y archivo como este userApi.ts tambien definir el tipado que se espaera obtener en type como User.ts

//para increptar contraseñas intalar bcryptjs
npm install bcryptjs
npm install -D @types/bcryptjs


import { Sun, Moon, LogIn, UserPlus } from 'lucide-react'; // Iconos (necesitas instalar: npm install lucide-react)

//esto es para autenticación del lado del Backend
Librería	Propósito	Comando de Instalación (si no las tienes)
bcryptjs	Cifrar y comparar contraseñas de forma segura.	npm install bcryptjs @types/bcryptjs
jsonwebtoken	Crear y verificar los Tokens Web (JWT).	npm install jsonwebtoken @types/jsonwebtoken
prisma/client	ORM para interactuar con la base de datos (DB).	(Ya deberías tenerlo si usas Prisma)

// intalar lo siguiente para el control de subida de imagenes
npm install multer
npm install --save-dev @types/multer

// para los graficos  Chart.js
npm install chart.js react-chartjs-2
npm install xlsx

//railway
mysql://root:UMXRuXJfuqJQIZRpnNkdDonAXCzmcDKt@switchback.proxy.rlwy.net:53489/railway
roshi-fit-club-production.up.railway.app

//versiones que se tienen instaladas en el pc
Composer version 2.8.8 2025-04-04 16:56:46
mysql version 8.0.39


// para agregar imagenes con tailwind
bg-[image:url('https://tu-url-directa.jpg')]
{
  "name": "roshi_fit_club",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@prisma/client": "^6.16.3",
    "@tailwindcss/vite": "^4.1.14",
    "axios": "^1.12.2",
    "bcryptjs": "^3.0.2",
    "express": "^5.1.0",
    "lucide-react": "^0.544.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.3",
    "tailwindcss": "^4.1.14"
  },

  {
  "name": "roshi-fit-club-backend",
  "version": "1.0.0",
  "description": "Backend for Roshi Fit Club using Node, Express, and Prisma.",
  "main": "dist/server.js",
  "scripts": {
    "start": "node dist/server.js",
    "dev": "nodemon src/server.ts",
    "build": "tsc"
  },
  "keywords": [
    "gym",
    "express",
    "prisma"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@prisma/client": "^5.22.0",
    "@types/jsonwebtoken": "^9.0.10",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2"
  },